{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/lets-create-reactjs-from-scratch-part-2/","result":{"data":{"site":{"siteMetadata":{"title":"anandamritraj.in","author":"Anand Raj"}},"markdownRemark":{"id":"c61b52d3-79b3-5056-9218-f37ffeb38430","html":"<h2 id=\"recap\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<p>In this series of posts, we are creating major react functionalities from scratch. So far we have covered the <code class=\"language-text\">render</code> function. You can read more about it here: <a href=\"/lets-create-reactjs-from-scratch-part-1\">Let’s create ReactJS from scratch- Part 1</a>.</p>\n<h2 id=\"introducing-jsx\"><a href=\"#introducing-jsx\" aria-label=\"introducing jsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introducing JSX</h2>\n<p>Okay, so we got till this point where we have created our own <code class=\"language-text\">render</code> function which takes <em>MyReact</em> elements as arguments and renders them to DOM. While this is cool to render a link inside a div, if you have to render anything more than that, say navigation, it becomes annoying to write our HTML tags as javascript objects.</p>\n<p>Let’s see an example,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'ul'</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n              type<span class=\"token punctuation\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>\n              props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                  <span class=\"token punctuation\">{</span>\n                    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TEXT_ELEMENT'</span><span class=\"token punctuation\">,</span>\n                    props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                      nodeValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'I want to use JSX'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              type<span class=\"token punctuation\">:</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>\n              props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n                  <span class=\"token punctuation\">{</span>\n                    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TEXT_ELEMENT'</span><span class=\"token punctuation\">,</span>\n                    props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                      nodeValue<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Its only second li and I'm annoyed!\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above lines will render this</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>I want to use JSX<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Its only second li and I'm annoyed!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Introducing JSX! JSX is just syntactic sugar. Using a JSX transpiler you can convert your HTML looking syntax into elements which can be understood by javascript and rendered correctly by the browser.</p>\n<p>As a JSX transpiler, you can use <a href=\"https://github.com/babel/babel/\">Babel</a>. It has a great open-source community and easy to use CLI tool.</p>\n<p>If you are working with React you are most probably using it. But JSX is not actually tied to react it can be used without react and is not very tough to understand and use.</p>\n<blockquote>\n<p>If you want to learn more about JSX check out <a href=\"https://jasonformat.com/wtf-is-jsx/\">this article</a>, <a href=\"http://facebook.github.io/jsx/\">Draft: JSX Specification</a> and also <a href=\"https://reactjs.org/docs/jsx-in-depth.html\">JSX In Depth</a> react documentation.</p>\n</blockquote>\n<p>So in case of the above example, you can write something like below,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/** @jsx createElement */</span>\n<span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token constant\">I</span> want to use <span class=\"token constant\">JSX</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Its only second li and <span class=\"token constant\">I</span>'m annoyed<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you are familiar with javascript you would be guessing if the above is a valid javascript: <em>its not</em>.</p>\n<p>The first line is a comment which babel understands, the name <code class=\"language-text\">createElement</code> is the name of the function which babel is going to call for each tag it encounters. It is known as <em>pragma</em> in <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma\">babel configuration</a>.</p>\n<p>Babel will transpile the JSX code into a bunch of function calls like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> someJsx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token string\">\"class\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nav\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"ul\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"class\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"nav-links\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Home\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Profile\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"Logout\"</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So all we need to do now is implement <code class=\"language-text\">createElement</code> function. The first argument of the function is <code class=\"language-text\">type</code> of the element. The second element is <code class=\"language-text\">props</code> and the following elements are children. If you remember our implementation of the <code class=\"language-text\">render</code> function from <a href=\"/lets-create-reactjs-from-scratch-part-1/\">here</a>, you will remember that the render function takes the element in the form,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So what we need to do in <code class=\"language-text\">createElement</code> function is to move the third argument which contains the <code class=\"language-text\">children</code> under the <code class=\"language-text\">props</code> and return the resulting object which can be consumed by our <code class=\"language-text\">MyReact.render</code> function.</p>\n<p>If I am not making sense there, let’s create the <code class=\"language-text\">createElement</code> function and let the code do the talking. Its similar to the <code class=\"language-text\">React.createElement</code> function. Check out <a href=\"https://reactjs.org/docs/jsx-in-depth.html\">this page</a> to learn more.</p>\n<h2 id=\"the-createelement-function\"><a href=\"#the-createelement-function\" aria-label=\"the createelement function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The createElement function</h2>\n<p>I would just put it out there and explain the code.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> hasChildren <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n\n  props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> hasChildren <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The three arguments are provided to the function by the transpiler (which is babel in our case). The third argument will contain all of the children of the current node. We are simply assigning the props to the <code class=\"language-text\">props</code> object, children to <code class=\"language-text\">props.children</code> object. Then return the object, this is something our <code class=\"language-text\">MyReact.render</code> function can work with!</p>\n<p>Well, that was pretty simple. But our render function <code class=\"language-text\">MyReact.render</code> expects the text elements to have a type of <code class=\"language-text\">TEXT_ELEMENT</code> and also a <code class=\"language-text\">nodeValue</code> prop. So let’s do that!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> hasChildren <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n\n  <span class=\"token keyword\">const</span> allChildren <span class=\"token operator\">=</span> hasChildren <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token comment\">// Filter all the children which are null,</span>\n  <span class=\"token comment\">// we don't need to render them</span>\n  props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> allChildren\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span> child <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> child <span class=\"token operator\">!==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>child <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span> <span class=\"token operator\">?</span> child <span class=\"token punctuation\">:</span> <span class=\"token function\">createTextElement</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// For text nodes, child above is a string</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// This function handles the creation of text nodes</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createTextElement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TEXT_ELEMENT'</span><span class=\"token punctuation\">,</span>\n    props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      nodeValue<span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now our <code class=\"language-text\">createElement</code> function is complete and ready to use. A couple of things before you try to use this to create a web app. Since we are using JSX which is not a part of standard javascript, we need to transpile this code before we can use this. I am going to use Babel for transpiling the code into something which the browser can understand.</p>\n<p>You can check out this <a href=\"https://babeljs.io/repl#?babili=false&#x26;browsers=&#x26;build=&#x26;builtIns=false&#x26;spec=false&#x26;loose=false&#x26;code_lz=PQKhAIAECsGcA9wFkCeAlApgQwMYBcA6HAJ2zwwFEAbDAWwwDs9wRgAoHAewdmdU1zMAvOADmGPP2z4AFAEoA3B269wAFQoANNQH0KAGQpIKAOTXgRAIg3a9h42ctLlPZrRTU6jYeBltw4AA8ACYAlgBuAHz-AUEArlTRsbGBVKGRAJK0AA409EzgAvjgpAzBGMSBwGlJyUE1WbleBUXMXDnc3lU1Mcmp6Y153oXSzABmoQBGFd3pvSk1mLm4GOCcxKGioQxYVCOCs7V9NQDC3ACOcRXgeAAWqwDu61TBAISH81UJtVVhUWyKNhsKSCAilcrEGTuTz5PAAGnAwU4ODisII4jwMO8ACEUBlgjJLO4ALSkQTErDZbKWOSAthjOIMfChbhiCQg2RycAAbxiDKZeBZDBKjAhMgwQyYCOyWFKeC5vOSwGA4AA4hIbvdwNliJxsrBwFgyjcUNlVmNdbRwBLmsxOJNoBh8PMuK4eSazdLdfrwABfCzWyV4ZxKlUne44ADW4FCYxjzFCBqwNww8GYNthLpUCdgalTmKDAbwptWQjL4GsWl0BiMpjUTiBofAJzJ5EN4AYGAeiM4Voz3izbqRVpEr0TebTWKY8wCAH4eyi0SQyJQgzJi2a5DPwAAuBeo7xEVsYCd4EyccoyHV62AEBgXjAANV2VzpTYAYqEqORiOAxutrXCbx9ETchO2IA1tk1VZr31QdVETEDeEYa4RB2egLEiDssHoAheFlPBYAAdVCO5CW4GkQ1iZVwAAQWCYJAOA0CUIgm5OGgns-yDeYAHkHSdQhIwwFBYCvb1YC3OpwAICZvwqGREJY8CpLqWT1goXBbhkdDSywxVpPAV1VAwICmDUEsA10gg8E4fROAeCoTiwWAMHkPC4kmXgNgYUQZAAJkBQyuIILAGIoMy8CQsCFNM7wLM9bUJIAbV0gBdIK6l9N9YmMnNaLwPANkmOI2zQnC9PAMdYAKoqplK1YADJGuwjDXnLSwcFuL9glKBs-IE_ACGE0TxJvVTklkr8f0UmrCuKhqJtidTiE0rqdIqzCeW3AJh1Siq0oDWDYH2-g0qUaTsqogIaPDJ1o1jaDSENZ6jRQIzupeUoDU4OM7lWLYzMDW14LaT7ginQijokohwdKcAAB8EfAZLzsbaiVXBa47k4VyPp676RRRCCIgld6JggvAXXByHb3_VatPFPYhCwrHIQlBFh1pa7wBoiYdioKh3spM1jX-4HYXYziZTlCWB2SGXDxF0Vwx6mQuYuv10f5ZlWWXLByEh9cSwRV0JlEBECCt2VREk7bkjypKbwDfjHSGlzYE2BgZG5X1Te4c3MoCR3bhc1WvsYAMbdvGhfLucAsIABh5x3diocPesjkRQ9gDP4fnVGiG4HADZkK3QuIW2uT3VGeeO2GCazw1Bbzxhtym-TIS6nqtu7l4qvLBgEj2Zr8f79qRDGXZXKWgICFoSkZD7xiWZ2sfGO2fCmQwX7wFdwTwHnZfdyM49TyN5fZ_AHKAlIPA4mIYVuQ9DAvWd31Nd9bXGV14V9fIc-a5wgvgwAqeYd8H5P23BuDAe4bDVnsHWOE25jp7gMtJe85RnxUCuHuYBOCMDbi_skD-MRiEinvo_e2sQ2bIIdseSGZClBfyAA&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=false&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=true&#x26;presets=react&#x26;prettier=false&#x26;targets=&#x26;version=6.26.0&#x26;envVersion=1.6.2\">REPL</a> to see how babel converts the code into a bunch of <code class=\"language-text\">createElement</code> calls.</p>\n<blockquote>\n<p>If you just want to see how this is used in a real-world application, I made a <a href=\"https://codepen.io/anamritraj/pen/gZVKBy\"><strong>codepen demo</strong></a> to show the usage.</p>\n</blockquote>\n<h2 id=\"making-it-work-in-the-browser\"><a href=\"#making-it-work-in-the-browser\" aria-label=\"making it work in the browser permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Making it work in the browser</h2>\n<p>The above codepen demo works since we are using babel as a preprocessor and it includes a bunch of plugins with it. If you want to make it work in your local machine you would have to include a couple of packages to transpile your JSX into <code class=\"language-text\">createElement</code> function calls.</p>\n<p>We’ll start of by adding a bunch of npm packages,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i --save-dev @babel/cli @babel/core @babel/plugin-syntax-jsx @babel/plugin-transform-react-jsx @babel/preset-env</code></pre></div>\n<ul>\n<li><code class=\"language-text\">@babel/core</code> is the core babel package</li>\n<li><code class=\"language-text\">@babel/cli</code> allows us to use babel as a CLI tool</li>\n<li><code class=\"language-text\">@babel/plugin-syntax-jsx</code> helps babel to understand the JSX syntax as babel does not support it out of the box</li>\n<li><code class=\"language-text\">@babel/plugin-transform-react-jsx</code> this is the main package which transpiles JSX into function calls. By default this uses React.createElement as the pragma function. You can read more about it <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#pragma\">here</a>.</li>\n<li><code class=\"language-text\">@babel/preset-env</code> is responsible for allowing us to use the latest JavaScript without needing to micromanage syntax transforms (and optionally, browser polyfills) that are needed by the browser. This is just a collection of plugins.</li>\n</ul>\n<p>Now one final thing we need to do is add a <code class=\"language-text\">.babelrc</code> file which is just to tell babel which presets and plugins (which we installed above) to use. Let’s define one.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;presets&quot;: [&quot;@babel/preset-env&quot;]undefined\n  &quot;plugins&quot;: [&quot;@babel/plugin-syntax-jsx&quot;undefined &quot;@babel/plugin-transform-react-jsx&quot;]\n}</code></pre></div>\n<p>We are almost done, now all we need to do is run the babel-cli to compile our file containing JSX code into a which the browser can understand.</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">babel ./src/main.js -o ./dist/bundle.js</code></pre></div>\n<p><code class=\"language-text\">-o</code> flag tells babel to output the file as a specified name in a folder.</p>\n<h2 id=\"code--demo\"><a href=\"#code--demo\" aria-label=\"code  demo permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code &#x26; Demo</h2>\n<p>The entire code for this is available on <a href=\"https://github.com/anamritraj/my-react\">Github</a>.</p>\n<p>You can check out this <a href=\"https://babeljs.io/repl#?babili=false&#x26;browsers=&#x26;build=&#x26;builtIns=false&#x26;spec=false&#x26;loose=false&#x26;code_lz=PQKhAIAECsGcA9wFkCeAlApgQwMYBcA6HAJ2zwwFEAbDAWwwDs9wRgAoHAewdmdU1zMAvOADmGPP2z4AFAEoA3B269wAFQoANNQH0KAGQpIKAOTXgRAIg3a9h42ctLlPZrRTU6jYeBltw4AA8ACYAlgBuAHz-AUEArlTRsbGBVKGRAJK0AA409EzgAvjgpAzBGMSBwGlJyUE1WbleBUXMXDnc3lU1Mcmp6Y153oXSzABmoQBGFd3pvSk1mLm4GOCcxKGioQxYVCOCs7V9NQDC3ACOcRXgeAAWqwDu61TBAISH81UJtVVhUWyKNhsKSCAilcrEGTuTz5PAAGnAwU4ODisII4jwMO8ACEUBlgjJLO4ALSkQTErDZbKWOSAthjOIMfChbhiCQg2RycAAbxiDKZeBZDBKjAhMgwQyYCOyWFKeC5vOSwGA4AA4hIbvdwNliJxsrBwFgyjcUNlVmNdbRwBLmsxOJNoBh8PMuK4eSazdLdfrwABfCzWyV4ZxKlUne44ADW4FCYxjzFCBqwNww8GYNthLpUCdgalTmKDAbwptWQjL4GsWl0BiMpjUTiBofAJzJ5EN4AYGAeiM4Voz3izbqRVpEr0TebTWKY8wCAH4eyi0SQyJQgzJi2a5DPwAAuBeo7xEVsYCd4EyccoyHV62AEBgXjAANV2VzpTYAYqEqORiOAxutrXCbx9ETchO2IA1tk1VZr31QdVETEDeEYa4RB2egLEiDssHoAheFlPBYAAdVCO5CW4GkQ1iZVwAAQWCYJAOA0CUIgm5OGgns-yDeYAHkHSdQhIwwFBYCvb1YC3OpwAICZvwqGREJY8CpLqWT1goXBbhkdDSywxVpPAV1VAwICmDUEsA10gg8E4fROAeCoTiwWAMHkPC4kmXgNgYUQZAAJkBQyuIILAGIoMy8CQsCFNM7wLM9bUJIAbV0gBdIK6l9N9YmMnNaLwPANkmOI2zQnC9PAMdYAKoqplK1YADJGuwjDXnLSwcFuL9glKBs-IE_ACGE0TxJvVTklkr8f0UmrCuKhqJtidTiE0rqdIqzCeW3AJh1Siq0oDWDYH2-g0qUaTsqogIaPDJ1o1jaDSENZ6jRQIzupeUoDU4OM7lWLYzMDW14LaT7ginQijokohwdKcAAB8EfAZLzsbaiVXBa47k4VyPp676RRRCCIgld6JggvAXXByHb3_VatPFPYhCwrHIQlBFh1pa7wBoiYdioKh3spM1jX-4HYXYziZTlCWB2SGXDxF0Vwx6mQuYuv10f5ZlWWXLByEh9cSwRV0JlEBECCt2VREk7bkjypKbwDfjHSGlzYE2BgZG5X1Te4c3MoCR3bhc1WvsYAMbdvGhfLucAsIABh5x3diocPesjkRQ9gDP4fnVGiG4HADZkK3QuIW2uT3VGeeO2GCazw1Bbzxhtym-TIS6nqtu7l4qvLBgEj2Zr8f79qRDGXZXKWgICFoSkZD7xiWZ2sfGO2fCmQwX7wFdwTwHnZfdyM49TyN5fZ_AHKAlIPA4mIYVuQ9DAvWd31Nd9bXGV14V9fIc-a5wgvgwAqeYd8H5P23BuDAe4bDVnsHWOE25jp7gMtJe85RnxUCuHuYBOCMDbi_skD-MRiEinvo_e2sQ2bIIdseSGZClBfyAA&#x26;debug=false&#x26;forceAllTransforms=false&#x26;shippedProposals=false&#x26;circleciRepo=&#x26;evaluate=false&#x26;fileSize=false&#x26;timeTravel=false&#x26;sourceType=module&#x26;lineWrap=true&#x26;presets=react&#x26;prettier=false&#x26;targets=&#x26;version=6.26.0&#x26;envVersion=1.6.2\">REPL</a> to see how babel converts the code into a bunch of <code class=\"language-text\">MyReact.createElement</code> calls.</p>\n<p>I also made a <a href=\"https://codepen.io/anamritraj/pen/gZVKBy\"><strong>codepen demo</strong></a> to demonstrate how you would use this in a real-world application.</p>\n<h2 id=\"endnotes\"><a href=\"#endnotes\" aria-label=\"endnotes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Endnotes</h2>\n<p>This is the second post in the series where we are creating a clone of ReactJs! As always, the entire code for this is available on <a href=\"https://github.com/anamritraj/my-react\">Github</a>.</p>\n<p>If you see any errors then please let me know! I am also human and don’t know everything. Thanks for reading! :)</p>\n<p>I would love to know what features would you want me to implement next. Though I have only started, I plan to make this as close to original React as possible. It may never be production ready but I will learn a lot.</p>\n<p>See you next time!</p>","timeToRead":13,"frontmatter":{"title":"Let's create ReactJS from scratch- Part 2","date":"January 23, 2019","spoiler":"JSX from scratch!"},"fields":{"slug":"/lets-create-reactjs-from-scratch-part-2/"}}},"pageContext":{"slug":"/lets-create-reactjs-from-scratch-part-2/","previous":{"fields":{"slug":"/lets-create-reactjs-from-scratch-part-1/"},"frontmatter":{"title":"Let's create ReactJS from scratch- Part 1"}},"next":{"fields":{"slug":"/how-100-days-of-fitness-changed-me/"},"frontmatter":{"title":"How '#100DaysOfFitness' changed me?"}}}}}