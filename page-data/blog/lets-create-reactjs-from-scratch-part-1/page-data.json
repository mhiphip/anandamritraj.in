{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/lets-create-reactjs-from-scratch-part-1/","result":{"data":{"site":{"siteMetadata":{"title":"anandamritraj.in","author":"Anand Raj"}},"markdownRemark":{"id":"d3caba08-77d7-5f76-b34a-8e5a515d31ab","html":"<p>Being a React fanboy, I have always wondered how it is so performant even in heavy data-driven applications. Also, I have always wanted to contribute to ReactJS on GitHub but somehow, I feel that the repository can be overwhelming for someone who has never contributed to open-source apart from creating issues.</p>\n<p>Right now I am brushing up my Data Structures and Algorithmic skills and was thinking where to apply what I have learnt. Implementing your own linked lists and hashmaps is cool but what next? This is when I thought to create my own version of ReactJS.</p>\n<p>This would help me with a couple of things:</p>\n<ul>\n<li>Understand how React works internally.</li>\n<li>Apply my little knowledge of data structures to re-create something which I currently use as a black box.</li>\n<li>Make me a better Javascript developer.</li>\n<li>Helping me in contributing to the original ReactJS library.</li>\n</ul>\n<p>Let’s also list out the features which I am planning to add to <em>MyReact</em></p>\n<ul>\n<li>Render DOM elements</li>\n<li>Possibly explore JSX and use it to render DOM elements.</li>\n<li>Custom Class components and state</li>\n<li>And the MVP virtual DOM!</li>\n<li>Also, I want to understand the Fiber Architecture and re-create it</li>\n</ul>\n<p>So let’s get started, first of all, we need a name. I am really not good at naming things. So I named it <em>MyReact</em>. Pretty innovative eh?</p>\n<p>Okay now, let’s really start. So our aim is to create a basic version of ReactJs first without worrying about performance, debuggability, portability etc. Although, we are going to improve it over time and <em>soon replace the original ReactJS with MyReact.</em> *laughs like a villain*</p>\n<blockquote>\n<p>You can find more information about the <a href=\"https://reactjs.org/docs/codebase-overview.html\">implementation details</a> or enjoy <a href=\"https://www.youtube.com/watch?v=_MAD4Oly9yg\">this talk</a> by Paul O’Shannessy.</p>\n</blockquote>\n<p>Let’s start by creating the <code class=\"language-text\">render()</code> function which is responsible for creating the DOM elements. You don’t need to be a pro with javascript to understand the <code class=\"language-text\">document.createElement()</code> function but for the sake of this tutorial, let’s revisit the basic DOM API available in the browser</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Get an element by its id,</span>\n<span class=\"token keyword\">var</span> parent <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByID</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app-root'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Now create a new element of a given tag</span>\n<span class=\"token keyword\">var</span> child <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Add properties to the DOM element</span>\nchild<span class=\"token punctuation\">.</span>classList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'bold'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'fancy-color'</span><span class=\"token punctuation\">]</span>\nchild<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World!'</span>\n\n<span class=\"token comment\">// Now append that element to the parent</span>\nparent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So far we haven’t defined anything new, all the operations above are supported in all browsers without any libraries.</p>\n<p>As you can see in order to render tags on a webpage we are going to use the <code class=\"language-text\">document.createElement()</code>. That will take care of rendering tags on a page. Also, we can modify the properties and make it look like whatever we want using classes and custom inline CSS.</p>\n<p>Now that we have a way to render tags on the webpage, let’s go a step back and define what an element may look like in MyReact.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// If we want to represent a DOM element as an object,</span>\n<span class=\"token comment\">// following would be its properties</span>\n<span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// properties of the element</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'body'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// children can again contain elements,</span>\n    <span class=\"token comment\">// which are going to have the same structure</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> nodeValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'If you want to know more '</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> href<span class=\"token punctuation\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> nodeValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'Click here'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nothing fancy here, just a javascript object which represents the following structure in MyReact. Let’s call them MyReact Elements from now on.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>If you want to know more<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/home<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Click here<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>MyReact elements are <strong>not</strong> really different from <a href=\"https://reactjs.org/blog/2014/10/14/introducing-react-elements.html\">React Elements</a>. You usually don’t use javascript objects to define and create elements in React and probably use JSX. We are going to do the same in future posts. For now, we are going to use the above javascript object to define and render MyReact elements as DOM elements.</p>\n<h2 id=\"the-render-function\"><a href=\"#the-render-function\" aria-label=\"the render function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Render function</h2>\n<p>We have MyReact elements, let’s implement the <code class=\"language-text\">MyReact.render</code> function which is equivalent to <a href=\"https://facebook.github.io/react/docs/react-dom.html#render\">ReactDOM.render</a>. This function will create the DOM element defined by the javascript object and append it’s to its parent.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Get the props and type from element object</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> element\n\n  <span class=\"token comment\">// Check if there are any childrens of the given element</span>\n  <span class=\"token keyword\">const</span> childElements <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// render those childrens recursively first</span>\n  childElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// finally append the element to the parent element</span>\n  parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is the most basic version of the <code class=\"language-text\">render</code> function you’ll ever see. All this is doing is creating a DOM element and recursively adding all its children to the parent. This is still missing all the attributes and the eventListeners.</p>\n<p>Let’s iterate over the <code class=\"language-text\">props</code> keys using <code class=\"language-text\">Object.keys</code> to get eventListeners &#x26; attributes and set them properly.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Get the props and type from element object</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> element\n\n  <span class=\"token comment\">// Filter for eventListeners in the props</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'on'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Add eventListeners to the dom element</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isListener<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> eventType <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      dom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAttribute</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>isAttribute <span class=\"token operator\">&amp;&amp;</span> name <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isAttribute<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      dom<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Check if there are any childrens of the given element</span>\n  <span class=\"token keyword\">const</span> childElements <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// render those childrens recursively first</span>\n  childElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// finally append the element to the parent element</span>\n  parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"render-dom-text-nodes\"><a href=\"#render-dom-text-nodes\" aria-label=\"render dom text nodes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Render DOM Text Nodes</h2>\n<p>Now, this looks like a pretty complete <code class=\"language-text\">render</code> function. Except for one thing. The pure Text Nodes. Let’s define how a text element will look like as a javascript object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> textElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> span<span class=\"token punctuation\">,</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    children<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'TEXT_NODE'</span><span class=\"token punctuation\">,</span>\n        props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> nodeValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello World!'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The above definition would define something like when passed through our <code class=\"language-text\">render</code> function</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span> Hello World! <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Notice how we defined a new type <code class=\"language-text\">TEXT_ELEMENT</code> which we will use in our render function. Let’s see how we use that. Instead of using <code class=\"language-text\">createElement</code> we are going to use <code class=\"language-text\">createTextNode</code> function. The <code class=\"language-text\">nodeValue</code> property will be set in the same way as before and we don’t need to pass it explicitly in the <code class=\"language-text\">createTextNode</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Get the props and type from element object</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> element\n\n  <span class=\"token comment\">// Check if it is a text element</span>\n  <span class=\"token keyword\">const</span> isTextElement <span class=\"token operator\">=</span> type <span class=\"token operator\">===</span> <span class=\"token string\">'TEXT_ELEMENT'</span>\n\n  <span class=\"token comment\">// Create a new dom element or TextNode based on the type</span>\n  <span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>isTextElement\n    <span class=\"token operator\">?</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Filter for eventListeners in the props</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'on'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Add eventListeners to the dom element</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isListener<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> eventType <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      dom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAttribute</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>isAttribute <span class=\"token operator\">&amp;&amp;</span> name <span class=\"token operator\">!==</span> <span class=\"token string\">'children'</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isAttribute<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      dom<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Check if there are any childrens of the given element</span>\n  <span class=\"token keyword\">const</span> childElements <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// render those childrens recursively first</span>\n  childElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// finally append the element to the parent element</span>\n  parent<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The entire code for this is available on <a href=\"https://github.com/anamritraj/my-react/blob/master/src/render.js\">Github</a>.</p>\n<p>I made a <a href=\"https://codepen.io/anamritraj/pen/aPgOPj\"><strong>codepen demo</strong></a> to demonstrate how you would use this in a real world application.</p>\n<h2 id=\"endnotes\"><a href=\"#endnotes\" aria-label=\"endnotes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Endnotes</h2>\n<p>This was really fun! The entire code for this is available on <a href=\"https://github.com/anamritraj/my-react\">Github</a>. This will be a series of posts where I will incrementally add features and post about my findings.</p>\n<p>I would love to know what features would you want me to implement next. Though I have only started, I plan to make this as close to original React as possible. It might never be production ready but I will learn a lot.</p>\n<p>See you next time!</p>","timeToRead":6,"frontmatter":{"title":"Let's create ReactJS from scratch- Part 1","date":"January 18, 2019","spoiler":"I have always wondered how React works under the hood"},"fields":{"slug":"/lets-create-reactjs-from-scratch-part-1/"}}},"pageContext":{"slug":"/lets-create-reactjs-from-scratch-part-1/","previous":{"fields":{"slug":"/weekend-with-algorithms-1/"},"frontmatter":{"title":"Weekend with Algorithms and Data structures- 1"}},"next":{"fields":{"slug":"/lets-create-reactjs-from-scratch-part-2/"},"frontmatter":{"title":"Let's create ReactJS from scratch- Part 2"}}}}}